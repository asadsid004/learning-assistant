// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roadmap {
  id                String      @id @default(cuid())
  title             String
  description       String
  goal              String
  currentSkillLevel String
  timeCommitment    Int
  durationInWeeks   Int
  userId            String
  milestones        Milestone[]
  progress          Int         @default(0)
  // isPublic          Boolean     @default(false)
  // shareableUrl      String?     @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Milestone {
  id             String     @id @default(cuid())
  title          String
  description    String
  durationInDays Int
  order          Int
  progress       Int        @default(0)
  isCompleted    Boolean    @default(false)
  roadmapId      String
  roadmap        Roadmap    @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  resources      Resource[]
  tasks          Task[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  isCompleted Boolean   @default(false)
  dueDate     DateTime
  order       Int
  milestoneId String
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String
  type        ResourceType
  url         String
  milestoneId String
  milestone   Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum ResourceType {
  COURSE
  YOUTUBE
  TUTORIAL
  BOOK
  VIDEO
  ARTICLE
  OTHER
}

// QUIZ Schema
model Quiz {
  id               String     @id @default(cuid())
  title            String
  description      String
  difficulty       String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  userId           String
  attempted        Boolean
  numQuestions     Int
  correctQuestions Int?
  timeLimit        Int
  score            Float?
  questions        Question[]
  report           Report?    @relation(fields: [reportId], references: [id])
  reportId         String?
}

model Question {
  id          String   @id @default(cuid())
  text        String
  explanation String?
  quizId      String
  userAnswer  String?
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options     Option[]
}

model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Report Summary
  summary String @db.Text

  // Topic Insights
  topicInsights TopicInsight[]

  // Resource Links
  resourceLinks ResourceLink[]
  Quiz          Quiz[]
}

// Helper model for Topic Insights (key-value pairs)
model TopicInsight {
  id       String @id @default(cuid())
  topic    String // The topic name (key)
  insight  String @db.Text // The explanation (value)
  reportId String // Foreign key to Explanation
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

// Helper model for Resource Links (topic and URLs)
model ResourceLink {
  id       String @id @default(cuid())
  topic    String // The topic name
  url      String // The URL of the resource
  reportId String // Foreign key to Explanation
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

// Flashcard model

model FlashcardSet {
  id          String      @id @default(cuid())
  title       String
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  flashcards  Flashcard[]

  @@index([userId])
}

model Flashcard {
  id             String       @id @default(cuid())
  front          String
  back           String
  hint           String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  flashcardSetId String
  flashcardSet   FlashcardSet @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)

  @@index([flashcardSetId])
}

// Chatpdf schema
model ChatPdf {
  id        String    @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime  @default(now())
  chunks    Chunk[]
  messages  Message[]
}

model Chunk {
  id        String                     @id @default(uuid())
  chatPdfId String
  content   String                     @db.Text
  embedding Unsupported("vector(768)") // Google Embedding Model returns 768-dimension vectors
  chatPdf   ChatPdf                    @relation(fields: [chatPdfId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid())
  chatPdfId String   @db.Text
  role      String
  content   String
  createdAt DateTime @default(now())
  chatPdf   ChatPdf  @relation(fields: [chatPdfId], references: [id], onDelete: Cascade)
}

// Notes schema

model Note {
  id        String   @id @default(uuid())
  title     String
  userId    String
  content   String   @db.Text // Using Text type for longer content
  summary   String?  @db.Text // Optional summarization field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
